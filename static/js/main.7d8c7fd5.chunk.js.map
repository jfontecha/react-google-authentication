{"version":3,"sources":["utils/refreshToken.js","components/Login.js","components/Logout.js","components/LoginHooks.js","components/LogoutHooks.js","App.js","serviceWorker.js","index.js"],"names":["refreshTokenSetup","res","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","console","log","localStorage","setItem","id_token","setTimeout","clientId","process","CLIENTID","Login","buttonText","onSuccess","profileObj","alert","name","onFailure","cookiePolicy","style","marginTop","isSignedIn","Logout","onLogoutSuccess","LoginHooks","signIn","useGoogleLogin","accessType","onClick","className","src","alt","LogoutHooks","signOut","useGoogleLogout","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAAaA,EAAoB,SAACC,GAEhC,IAAIC,EAA6D,KAA5CD,EAAIE,SAASC,YAAc,MAE1CC,EAAY,uCAAG,4BAAAC,EAAA,sEACML,EAAIM,qBADV,OACbC,EADa,OAEnBN,EAA2D,KAA1CM,EAAWJ,YAAc,MAC1CK,QAAQC,IAAI,cAAeF,GAE3BG,aAAaC,QAAQ,YAAaJ,EAAWK,UAG7CC,WAAWT,EAAcH,GARN,2CAAH,qDAYlBY,WAAWT,EAAcH,ICVrBa,EAAWC,+IAAYC,SAiCdC,MA/Bf,WAgBE,OACE,6BACE,kBAAC,cAAD,CACEH,SAAUA,EACVI,WAAW,QACXC,UApBY,SAACnB,GACjBQ,QAAQC,IAAI,8BAA+BT,EAAIoB,YAC/CC,MAAM,kCAAD,OAC+BrB,EAAIoB,WAAWE,KAD9C,2DAGLvB,EAAkBC,IAgBduB,UAbY,SAACvB,GACjBQ,QAAQC,IAAI,qBAAsBT,GAClCqB,MAAM,0FAYFG,aAAc,qBACdC,MAAO,CAAEC,UAAW,SACpBC,YAAY,MC9Bdb,EAAWC,+IAAYC,SAmBdY,MAjBf,WAME,OACE,6BACE,kBAAC,eAAD,CACEd,SAAUA,EACVI,WAAW,SACXW,gBAVY,WAChBrB,QAAQC,IAAI,4BACZY,MAAM,wCCFJP,EAAWC,+IAAYC,SAqCdc,MAnCf,WACE,IAeQC,EAAWC,yBAAe,CAChCb,UAhBgB,SAACnB,GACjBQ,QAAQC,IAAI,8BAA+BT,EAAIoB,YAC/CC,MAAM,kCAAD,OAC+BrB,EAAIoB,WAAWE,KAD9C,2DAGLvB,EAAkBC,IAYlBuB,UATgB,SAACvB,GACjBQ,QAAQC,IAAI,qBAAsBT,GAClCqB,MAAM,0FAQNP,WACAa,YAAY,EACZM,WAAY,YALNF,OAUR,OACE,4BAAQG,QAASH,EAAQI,UAAU,UACjC,yBAAKC,IAAI,mBAAmBC,IAAI,eAAeF,UAAU,SAEzD,0BAAMA,UAAU,cAAhB,yBCnCArB,EAAWC,+IAAYC,SA2BdsB,MAzBf,WACE,IASQC,EAAYC,0BAAgB,CAClC1B,WACAe,gBAXsB,SAAC7B,GACvBQ,QAAQC,IAAI,sBACZY,MAAM,mCAUNE,UAPgB,WAChBf,QAAQC,IAAI,2BAGN8B,QAMR,OACE,4BAAQL,QAASK,EAASJ,UAAU,UAClC,yBAAKC,IAAI,mBAAmBC,IAAI,eAAeF,UAAU,SAEzD,0BAAMA,UAAU,cAAhB,cCESM,MApBf,WACE,OACE,yBAAKN,UAAU,OACb,kDACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BARF,0CAS0C,IACxC,uBAAGO,KAAK,6DAAR,eAEK,IAZP,iBCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,a","file":"static/js/main.7d8c7fd5.chunk.js","sourcesContent":["export const refreshTokenSetup = (res) => {\r\n  // Timing to renew access token\r\n  let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\r\n\r\n  const refreshToken = async () => {\r\n    const newAuthRes = await res.reloadAuthResponse();\r\n    refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\r\n    console.log('newAuthRes:', newAuthRes);\r\n    // saveUserToken(newAuthRes.access_token);  <-- save new token\r\n    localStorage.setItem('authToken', newAuthRes.id_token);\r\n\r\n    // Setup the other timer after the first one\r\n    setTimeout(refreshToken, refreshTiming);\r\n  };\r\n\r\n  // Setup first refresh timer\r\n  setTimeout(refreshToken, refreshTiming);\r\n};\r\n","import React from 'react';\r\n\r\nimport { GoogleLogin } from 'react-google-login';\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\n\r\nconst clientId = process.env.CLIENTID;\r\n\r\nfunction Login() {\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    alert(\r\n      `Logged in successfully welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\r\n    );\r\n    refreshTokenSetup(res);\r\n  };\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login. 😢 Please ping this to repo owner twitter.com/sivanesh_fiz`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        style={{ marginTop: '100px' }}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\nconst clientId = process.env.CLIENTID;\r\n\r\nfunction Logout() {\r\n  const onSuccess = () => {\r\n    console.log('Logout made successfully');\r\n    alert('Logout made successfully ✌');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogout\r\n        clientId={clientId}\r\n        buttonText=\"Logout\"\r\n        onLogoutSuccess={onSuccess}\r\n      ></GoogleLogout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logout;\r\n","import React from 'react';\r\nimport { useGoogleLogin } from 'react-google-login';\r\n\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\n\r\nconst clientId = process.env.CLIENTID;\r\n\r\nfunction LoginHooks() {\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    alert(\r\n      `Logged in successfully welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\r\n    );\r\n    refreshTokenSetup(res);\r\n  };\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login. 😢 Please ping this to repo owner twitter.com/sivanesh_fiz`\r\n    );\r\n  };\r\n\r\n  const { signIn } = useGoogleLogin({\r\n    onSuccess,\r\n    onFailure,\r\n    clientId,\r\n    isSignedIn: true,\r\n    accessType: 'offline',\r\n    // responseType: 'code',\r\n    // prompt: 'consent',\r\n  });\r\n\r\n  return (\r\n    <button onClick={signIn} className=\"button\">\r\n      <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\r\n\r\n      <span className=\"buttonText\">Sign in with Google</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default LoginHooks;\r\n","import React from 'react';\r\nimport { useGoogleLogout } from 'react-google-login';\r\n\r\nconst clientId = process.env.CLIENTID;\r\n\r\nfunction LogoutHooks() {\r\n  const onLogoutSuccess = (res) => {\r\n    console.log('Logged out Success');\r\n    alert('Logged out Successfully ✌');\r\n  };\r\n\r\n  const onFailure = () => {\r\n    console.log('Handle failure cases');\r\n  };\r\n\r\n  const { signOut } = useGoogleLogout({\r\n    clientId,\r\n    onLogoutSuccess,\r\n    onFailure,\r\n  });\r\n\r\n  return (\r\n    <button onClick={signOut} className=\"button\">\r\n      <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\r\n\r\n      <span className=\"buttonText\">Sign out</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default LogoutHooks;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Login from './components/Login';\r\nimport Logout from './components/Logout';\r\nimport LoginHooks from './components/LoginHooks';\r\nimport LogoutHooks from './components/LogoutHooks';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>The Components way</h2>\r\n      <Login />\r\n      <br />\r\n      <Logout />\r\n      <h2>The Hooks way</h2>\r\n      <LoginHooks />\r\n      <LogoutHooks />\r\n      <br />\r\n      If it does helped you feel free to star{' '}\r\n      <a href=\"https://github.com/Sivanesh-S/react-google-authentication\">\r\n        Github Repo\r\n      </a>{' '}\r\n      😉\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}